"A personal vim configuration vim for python/php/javascript/coffeescript code development
" NOTE: you cant use arrows, only hjkl is allowed

" Invoke ":helptags" on all "doc" subdirectories in the "runtimepath" variable.

set nocompatible
" Vundle
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/Vundle
    let iCanHazVundle=0
endif

" required for Vundle
filetype off

set rtp+=~/.vim/bundle/Vundle/
call vundle#rc()

" -----------------------------------------------------------------------------
" Plugins
" -----------------------------------------------------------------------------
"
Bundle 'gmarik/vundle'
Bundle 'groenewege/vim-less'
Bundle 'helino/vim-json'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'Lokaltog/vim-distinguished'
Bundle 'majutsushi/tagbar'
Bundle 'kien/ctrlp.vim'
Bundle 'reinh/vim-makegreen'
Bundle 'kien/tabman.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'mattn/webapi-vim'
Bundle 'fholgado/minibufexpl.vim'
Bundle 'mileszs/ack.vim'
Bundle 'bingaman/vim-sparkup.git'
" Bundle 'nvie/vim-flake8'
" A Vim plugin which shows a git diff in the 'gutter'
" Bundle 'airblade/vim-gitgutter'
" Bundle 'pyflakes.vim'
Bundle 'jelera/vim-javascript-syntax'
" Bundle 'pangloss/vim-javascript'
" Bundle 'nathanaelkane/vim-indent-guides'
" Bundle 'Raimondi/delimitMate'
Bundle 'scrooloose/syntastic'
" Bundle 'Valloric/YouCompleteMe'
" Bundle 'marijnh/tern_for_vim'
Bundle 'kchmck/vim-coffee-script'
Bundle 'bling/vim-airline'
Bundle 'jmcantrell/vim-virtualenv'
Bundle 'Glench/Vim-Jinja2-Syntax'
Bundle 'jaxbot/browserlink.vim'
Bundle 'vim-scripts/EasyGrep'

" Installing plugins the first time
if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
endif

syntax on
filetype plugin on
filetype indent on

" -----------------------------------------------------------------------------
"  Detect OS to make things nicer
" -----------------------------------------------------------------------------
if has("unix")
  " 'Darwin' or 'Linux'.
  let s:uname = system("echo -n \"$(uname -s)\"")
  let $PLATFORM = tolower(s:uname)
else
  let s:uname = ""
end

" Set the font, colour scheme, etc. appropriately.
if has("gui_running")
  colors desert
  if has("gui_gtk2")
    set guifont=Monospace\ 9
  elseif has("gui_win32")
    set guifont=Consolas:h10:cANSI
  elseif has("gui_macvim")
    set guifont=Menlo\ Regular:h11
  endif
endif

" On Mac OS X, "set lines" causes the terminal window to be resized; we don't want that.
if has("gui_running")
  " gui_running => not in a terminal => safe to resize.
  if &lines < 50
    set lines=50
  endif
  if &columns < 120
    set columns=120
  endif
endif

" In terminal mode, use a different coloured cursor for insert mode:
if s:uname != "Darwin" && &term =~ "xterm-256color" && !has("gui_running")
  " Use an orange cursor in insert mode.
  let &t_SI = "\<Esc>]12;orange\x7"
  " Use a white cursor otherwise, and set it initially.
  let &t_EI = "\<Esc>]12;white\x7"
  silent !echo -ne "\E]12;white\x7"
  " Reset it when exiting.
  autocmd VimLeave * silent !echo -ne "\E]12;white\x7"
end

" -----------------------------------------------------------------------------
" Plugins Configurations
" -----------------------------------------------------------------------------

let g:pyflakes_use_quickfix = 0
" This does what it says on the tin. It will check your file on open too, not
" just on save.
" You might not want this, so just leave it out if you don't.
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_javascript_jshint_conf="~/.jshintrc"
let g:jshint_highlight_color = "Red"
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
" Better :sign interface symbols
let g:syntastic_auto_jump=0
let g:syntastic_python_checkers=['flake8']
" check also when just opened the file
let g:syntastic_check_on_open = 1
" don't put icons on the sign column (it hides the vcs status icons of signify)
let g:syntastic_enable_signs = 0
let syntastic_python_flake8_args='--ignore=E501,E225,W293,E126,E127,E128'
let g:syntastic_python_checker_args='--ignore=E501,E225,W293,E126,E127,E128'
" These are the tweaks I apply to YCM's config, you don't need them but they
" might help.
" YCM gives you popups and splits by default that some people might not like,
" so these should tidy it up a bit for you.
let g:ycm_add_preview_to_completeopt=0
let g:ycm_confirm_extra_conf=0
set completeopt-=preview

let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='light'
" autofocus on tagbar open
let g:tagbar_autofocus = 1
let NERDTreeIgnore = ['\.pyc$', '\.pyo$']

let g:user_zen_expandabbr_key = '<c-e>'

" ctrl-p command
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'



set encoding=utf-8
set completeopt=menuone,longest,preview

" always show status bar
set ls=2

"hide buffers instead of closing them this means that the current buffer can be put to background without being written; and that marks and undo history are preserved
set hidden
set undolevels=1000
set background=dark
" -----------------------------------------------------------------------------
" GUI / Look & Feel
" -----------------------------------------------------------------------------

" The title of the window is determined by the "titlestring" variable.
set title

let &titlestring = expand('$USERNAME') . '@' . hostname()
    \ . ' : ' . '%{fnamemodify(getcwd(), ":p:~:h")}'
    \ . ' > ' . '%{expand("%:p:~")}'

" Show status line, even if there is only one window.
set laststatus=2

" Ignore non-text or back-up files.
set wildignore=*.o,*.obj,*.a,*.lib,*.so,*.dll,*.exe,*.pyc,*.class,*.swp,*~

" Indicate matching brackets when cursor is over them.
set showmatch

" when scrolling, keep cursor 3 lines away from screen border
set scrolloff=3

" -----------------------------------------------------------------------------
" Editing
" -----------------------------------------------------------------------------

" Make "<BS>" and "<Del>" behavior less surprising. (fix backspace problem )
set backspace=indent,eol,start


set pastetoggle=<F1>
" -----------------------------------------------------------------------------
" Indentation
" -----------------------------------------------------------------------------
set expandtab " insert space chars whenever a tab key is pressed
set tabstop=4 " how many columns a tab counts for
set softtabstop=4 " use 4 space chars for tab with insert mode (since expandtab is enabled)
set shiftwidth=4 " Number of spaces to use for each step of (auto)indent
" tab length exceptions on some file types
autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2
" For 'make', tabs = tabs.
autocmd FileType make set noexpandtab shiftwidth=8 softtabstop=8 tabstop=8
autocmd BufNewFile,BufEnter Makefile set noexpandtab shiftwidth=8 softtabstop=8 tabstop=8
autocmd BufNewFile,BufEnter *.mk set noexpandtab shiftwidth=8 softtabstop=8 tabstop=8

" Erlang
autocmd FileType erlang set expandtab shiftwidth=4 softtabstop=4 tabstop=8
autocmd BufNewFile,BufRead rebar.config set filetype=erlang
autocmd BufNewFile,BufRead *.app.src set filetype=erlang

" Prolog
autocmd Filetype pl set syntax=prolog
" -----------------------------------------------------------------------------
" Search / Regular Expressions
" -----------------------------------------------------------------------------

" Highlight search matches.
set hlsearch

" Enable spell checking.
" set spell

" Use the following dictionaries for spell checking.
set spelllang=en_us

" -----------------------------------------------------------------------------
" Backup
" -----------------------------------------------------------------------------

set writebackup
set backup
set backupcopy=yes
" set backupskip=
set backupdir=~/.backup
set swapfile
set updatetime=2000
set directory=~/.swap

" create needed directories if they don't exist
if !isdirectory(&backupdir)
    call mkdir(&backupdir, "p")
endif
if !isdirectory(&directory)
    call mkdir(&directory, "p")
endif

autocmd BufWritePre * let &backupext = '~@'
    \ . substitute(expand('%:p:h'), '[\\/:]', '%', 'g')

" -----------------------------------------------------------------------------
" Syntax Highlighting / Color Scheme
" -----------------------------------------------------------------------------
"
" mkdir -p ~/.vim/colors && cd ~/.vim/colors
" wget -O wombat256mod.vim http://www.vim.org/scripts/download_script.php?src_id=13400
set t_Co=256
color wombat256mod
" color  distinguished
"
colorscheme desert

" -----------------------------------------------------------------------------
" Hooks
" -----------------------------------------------------------------------------

" automatically reload vimrc when it's saved
au BufWritePost .vimrc so ~/.vimrc

autocmd BufWritePre * :call Trim()
autocmd BufNewFile,BufRead *.py compiler nose
" autocmd FileType python autocmd BufWritePre <buffer> :call Indent()
autocmd BufWritePre * let &backupext = '~@'
" tab spaces
autocmd Filetype html,htmldjango,handlebars setlocal ts=2 sts=2 sw=2
" autocmd Filetype javascript,coffee setlocal ts=2 sts=2 sw=2
autocmd Filetype css,less,sass,scss,stylus setlocal ts=2 sts=2 sw=2
" autocmd BufWritePost *.py call Flake8()
" autocmd FileType python compiler pylint


" -----------------------------------------------------------------------------
" Mapped Key Bindings
" -----------------------------------------------------------------------------
"
"Easier mapleader than the default "\"
let mapleader = ","

nmap <C-e> :e#<CR>
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>
map <leader>a <Esc>:Ack!
map <F2> :NERDTreeToggle<CR>
map <F3> :Ack!
map <F4> :call MakeGreen()<CR>
set tags=$VIRTUAL_ENV/tags,~/tags;/
map <F5> :rightbelow vsp <CR>:exec("tag ".expand("<cword>"))<CR>
" in addition to ctrl+] , i could press F5 to open up a vertical split in vim and
" view the source code
map <F6> :py set_breakpoint()<CR>
map <F7> :py remove_breakpoints()<CR>
map <F8> :TagbarToggle<CR>
nmap ,g :GundoToggle<CR>
nmap ,a <Esc>:Ack!
map <leader>jt <Esc>:%!json_xs -f json -t json-pretty<CR>
imap <C-c> <CR><Esc>O

" LaTeX (rubber) macro for compiling
nnoremap <leader>c :w<CR>:!rubber --pdf --warn all %<CR>

" View PDF macro; '%:r' is current file's root (base) name.
nnoremap <leader>v :!mupdf %:r.pdf &<CR><CR>

au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null

" Write file with sudo
cmap w!! %!sudo tee > /dev/null %

" Better resize from http://www.agillo.net/simple-vim-window-management/
" nmap <left>  :3wincmd <<cr>
" nmap <right> :3wincmd ><cr>
" nmap <up>    :3wincmd +<cr>
" nmap <down>  :3wincmd -<cr>
"

" -----------------------------------------------------------------------------
" Custom Functions
" -----------------------------------------------------------------------------
" Re-indent the whole buffer.
" Restore cursor position, window position, and last search after running a
" command.
function! Preserve(command)
  " Save the last search.
  let search = @/

  " Save the current cursor position.
  let cursor_position = getpos('.')

  " Save the current window position.
  normal! H
  let window_position = getpos('.')
  call setpos('.', cursor_position)

  " Execute the command.
  execute a:command

  " Restore the last search.
  let @/ = search

  " Restore the previous window position.
  call setpos('.', window_position)
  normal! zt

  " Restore the previous cursor position.
  call setpos('.', cursor_position)
endfunction

function! Indent()
  call Preserve('normal gg=G')
endfunction

" Remove trailing whitespace in the whole buffer.
function! Trim()
  call Preserve('%s/\s\+$//e')
endfunction

" Custom syntastic settings:
function s:find_jshintrc(dir)
    let l:found = globpath(a:dir, '.jshintrc')
    if filereadable(l:found)
        return l:found
    endif

    let l:parent = fnamemodify(a:dir, ':h')
    if l:parent != a:dir
        return s:find_jshintrc(l:parent)
    endif

    return "~/.jshintrc"
endfunction

function UpdateJsHintConf()
    let l:dir = expand('%:p:h')
    let l:jshintrc = s:find_jshintrc(l:dir)
    let g:syntastic_javascript_jshint_conf = l:jshintrc
endfunction

au BufEnter * call UpdateJsHintConf()

" Add the virtualenv's site-packages to vim path
py << EOF
import re
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
     project_base_dir = os.environ['VIRTUAL_ENV']
     sys.path.insert(0, project_base_dir)
     activate_this = os.path.join(project_base_dir,'bin/activate_this.py')
     execfile(activate_this, dict(__file__=activate_this))

ipdb_breakpoint = 'import ipdb; ipdb.set_trace()'

def set_breakpoint():
    breakpoint_line = int(vim.eval('line(".")')) - 1

    current_line = vim.current.line
    white_spaces = re.search('^(\s*)', current_line).group(1)

    vim.current.buffer.append(white_spaces + ipdb_breakpoint, breakpoint_line)


def remove_breakpoints():
    op = 'g/^.*%s.*/d' % ipdb_breakpoint
    vim.command(op)

EOF
