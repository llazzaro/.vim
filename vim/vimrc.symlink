"A personal vim configuration vim for python code development
" NOTE: you cant use arrows, only hjkl is allowed

" NOTE: It is important that the "pathogen#infect()" function is called before
" the ":filetype on" command.

" Invoke ":helptags" on all "doc" subdirectories in the "runtimepath" variable.
"
set nocompatible
" Vundle
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/Vundle
    let iCanHazVundle=0
endif

" required for Vundle
filetype off

set rtp+=~/.vim/bundle/Vundle/
call vundle#rc()

" let Vundle manage Vundle
Bundle 'gmarik/vundle'

Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'Lokaltog/vim-distinguished'
Bundle 'majutsushi/tagbar'
Bundle 'kien/ctrlp.vim'
Bundle 'reinh/vim-makegreen'
Bundle 'kien/ctrlp.vim'
Bundle 'kien/tabman.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'mattn/webapi-vim'
Bundle 'fholgado/minibufexpl.vim'
Bundle 'mileszs/ack.vim'
Bundle 'bingaman/vim-sparkup.git'
" Bundle 'nvie/vim-flake8'
" A Vim plugin which shows a git diff in the 'gutter'
" Bundle 'airblade/vim-gitgutter'
" Bundle 'pyflakes.vim'
Bundle 'jelera/vim-javascript-syntax'
" Bundle 'pangloss/vim-javascript'
" Bundle 'nathanaelkane/vim-indent-guides'
" Bundle 'Raimondi/delimitMate'
Bundle 'scrooloose/syntastic'
" Bundle 'Valloric/YouCompleteMe'
" Bundle 'marijnh/tern_for_vim'
Bundle 'kchmck/vim-coffee-script'
Bundle 'bling/vim-airline'

syntax on
filetype plugin on
filetype indent on

let g:pyflakes_use_quickfix = 0
" This does what it says on the tin. It will check your file on open too, not
" just on save.
" You might not want this, so just leave it out if you don't.
let g:syntastic_javascript_checkers = ['jshint']
let g:jshint_highlight_color = "Red"
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
" Better :sign interface symbols
let g:syntastic_error_symbol = 'âœ—'
let g:syntastic_warning_symbol = '!'
let g:syntastic_auto_jump=1
let g:syntastic_python_checkers=['flake8']
let syntastic_python_flake8_args='--ignore=E501,E225,W293'
let g:syntastic_python_checker_args='--ignore=E501,E225,W293'
" These are the tweaks I apply to YCM's config, you don't need them but they
" might help.
" YCM gives you popups and splits by default that some people might not like,
" so these should tidy it up a bit for you.
let g:ycm_add_preview_to_completeopt=0
let g:ycm_confirm_extra_conf=0
set completeopt-=preview

let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='light'

" Installing plugins the first time
if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
endif

set encoding=utf-8
set completeopt=menuone,longest,preview

" always show status bar
set ls=2

"hide buffers instead of closing them this means that the current buffer can be put to background without being written; and that marks and undo history are preserved
set hidden
set undolevels=1000
set background=dark
" -----------------------------------------------------------------------------
" GUI / Look & Feel
" -----------------------------------------------------------------------------

" The title of the window is determined by the "titlestring" variable.
set title

let &titlestring = expand('$USERNAME') . '@' . hostname()
    \ . ' : ' . '%{fnamemodify(getcwd(), ":p:~:h")}'
    \ . ' > ' . '%{expand("%:p:~")}'

" Show status line, even if there is only one window.
set laststatus=2

" Ignore non-text or back-up files.
set wildignore=*.o,*.obj,*.a,*.lib,*.so,*.dll,*.exe,*.pyc,*.class,*.swp,*~

" Indicate matching brackets when cursor is over them.
set showmatch

" -----------------------------------------------------------------------------
" Editing
" -----------------------------------------------------------------------------
set backspace=indent,eol,start "Make "<BS>" and "<Del>" behavior less surprising. (fix backspace problem )


set pastetoggle=<F1>
" Python PEP8 checker F5
" let g:pep8_map= '<F5>'
" -----------------------------------------------------------------------------
" Indentation
" -----------------------------------------------------------------------------
set expandtab " insert space chars whenever a tab key is pressed
set tabstop=4 " how many columns a tab counts for
set softtabstop=4 " use 4 space chars for tab with insert mode (since expandtab is enabled)
set shiftwidth=4 " Number of spaces to use for each step of (auto)indent
set autoindent
set smartindent


" -----------------------------------------------------------------------------
" Search / Regular Expressions
" -----------------------------------------------------------------------------

" Highlight search matches.
set hlsearch

" Enable spell checking.
set spell

" Use the following dictionaries for spell checking.
set spelllang=en_us

" -----------------------------------------------------------------------------
" Backup
" -----------------------------------------------------------------------------

" set writebackup
" set backup
" set backupcopy=yes
" set backupskip=
" set backupdir=~/.backup
autocmd BufWritePre * let &backupext = '~@'
    \ . substitute(expand('%:p:h'), '[\\/:]', '%', 'g')
" set swapfile
" set updatetime=2000
" set directory=~/.swap//

" -----------------------------------------------------------------------------
" Syntax Highlighting / Color Scheme
" -----------------------------------------------------------------------------
"
" mkdir -p ~/.vim/colors && cd ~/.vim/colors
" wget -O wombat256mod.vim http://www.vim.org/scripts/download_script.php?src_id=13400
set t_Co=256
color wombat256mod
" color  distinguished
"
colorscheme desert

" -----------------------------------------------------------------------------
" Hooks
" -----------------------------------------------------------------------------

" automatically reload vimrc when it's saved
au BufWritePost .vimrc so ~/.vimrc

autocmd BufWritePre * :call Trim()
autocmd BufNewFile,BufRead *.py compiler nose
" autocmd FileType python autocmd BufWritePre <buffer> :call Indent()
autocmd BufWritePre * let &backupext = '~@'
" tab spaces
autocmd Filetype html,htmldjango,handlebars setlocal ts=2 sts=2 sw=2
" autocmd Filetype javascript,coffee setlocal ts=2 sts=2 sw=2
autocmd Filetype css,less,sass,scss,stylus setlocal ts=2 sts=2 sw=2
" autocmd BufWritePost *.py call Flake8()
" autocmd FileType python compiler pylint


" -----------------------------------------------------------------------------
" Mapped Key Bindings
" -----------------------------------------------------------------------------
"ai ts=4 sts=4 et sw=4 " python/django standard tab format
"
" map <F6> :set makeprg=python\ scripts/nosetests|:call MakeGreen<CR>
nmap <C-e> :e#<CR>
nmap <C-n> :bnext<CR>
nmap <C-p> :bprev<CR>
map <F6> :call MakeGreen()<CR>
map <leader>a <Esc>:Ack!
map <F2> :NERDTreeToggle<CR>
map <F3> :Ack!
nmap ,g :GundoToggle<CR>
nmap ,a <Esc>:Ack!
map <leader>jt <Esc>:%!json_xs -f json -t json-pretty<CR>
imap <C-c> <CR><Esc>O

" LaTeX (rubber) macro for compiling
nnoremap <leader>c :w<CR>:!rubber --pdf --warn all %<CR>
"
" " View PDF macro; '%:r' is current file's root (base) name.
nnoremap <leader>v :!mupdf %:r.pdf &<CR><CR>

au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null

let g:user_zen_expandabbr_key = '<c-e>'

" ctrl-p command
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" Write file with sudo
cmap w!! %!sudo tee > /dev/null %

" Better resize from http://www.agillo.net/simple-vim-window-management/
" nmap <left>  :3wincmd <<cr>
" nmap <right> :3wincmd ><cr>
" nmap <up>    :3wincmd +<cr>
" nmap <down>  :3wincmd -<cr>
" -----------------------------------------------------------------------------
" Custom Functions
" -----------------------------------------------------------------------------
" Re-indent the whole buffer.
" Restore cursor position, window position, and last search after running a
" command.
function! Preserve(command)
  " Save the last search.
  let search = @/

  " Save the current cursor position.
  let cursor_position = getpos('.')

  " Save the current window position.
  normal! H
  let window_position = getpos('.')
  call setpos('.', cursor_position)

  " Execute the command.
  execute a:command

  " Restore the last search.
  let @/ = search

  " Restore the previous window position.
  call setpos('.', window_position)
  normal! zt

  " Restore the previous cursor position.
  call setpos('.', cursor_position)
endfunction

function! Indent()
  call Preserve('normal gg=G')
endfunction

" Remove trailing whitespace in the whole buffer.
function! Trim()
  call Preserve('%s/\s\+$//e')
endfunction

" Add the virtualenv's site-packages to vim path
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
     project_base_dir = os.environ['VIRTUAL_ENV']
     sys.path.insert(0, project_base_dir)
     activate_this = os.path.join(project_base_dir,'bin/activate_this.py')
     execfile(activate_this, dict(__file__=activate_this))
EOF
